// -----------------------------------------------------------------------------
// (c) balarabe@protonmail.com                                      License: MIT
// :v: 2018-03-19 23:43:04 4B9307                          [utest/draw_image.go]
// -----------------------------------------------------------------------------

package utest

import "fmt"     // standard
import "testing" // standard

import "github.com/balacode/one-file-pdf"

// DrawImage is the unit test for
// PDF.DrawImage(x, y, height float64, fileNameOrBytes interface{},
//     backColor ...string) *PDF
//
// Runs the test by drawing rgbw64.png:
// a small 64 x 64 PNG split into pure red, green, blue and white squares
func DrawImage(t *testing.T) {
	fmt.Println("utest.DrawImage")
	var (
		x        = 5.0
		y        = 5.0
		height   = 10.0
		filename = "./image/rgbw64.png"
		pngData  = []byte{
			0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
			0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
			0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40,
			0x08, 0x02, 0x00, 0x00, 0x00, 0x25, 0x0B, 0xE6,
			0x89, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47,
			0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
			0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00,
			0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00, 0x00,
			0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
			0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7,
			0x6F, 0xA8, 0x64, 0x00, 0x00, 0x00, 0x9B, 0x49,
			0x44, 0x41, 0x54, 0x68, 0x43, 0xED, 0xCF, 0x21,
			0x0E, 0x00, 0x31, 0x10, 0xC3, 0xC0, 0xFE, 0xFF,
			0xD3, 0x3D, 0xEE, 0x03, 0x21, 0x0D, 0xB0, 0x94,
			0x68, 0x88, 0x97, 0xED, 0xB9, 0xA7, 0x8B, 0xAD,
			0xC3, 0xD6, 0x61, 0xEB, 0xB0, 0x75, 0xD8, 0x3A,
			0x6C, 0x1D, 0xB6, 0x0E, 0x5B, 0x87, 0xAD, 0xC3,
			0xD6, 0x61, 0xEB, 0xB0, 0x75, 0xD8, 0x3A, 0x6C,
			0x1D, 0xB6, 0x0E, 0x5B, 0x87, 0xAD, 0xC3, 0xD6,
			0x61, 0xEB, 0xB0, 0x75, 0xD8, 0x3A, 0x6C, 0x1D,
			0xB6, 0x0E, 0x5B, 0x87, 0xAD, 0xC3, 0xD6, 0x61,
			0xEB, 0xB0, 0x75, 0xD8, 0x3A, 0x6C, 0x1D, 0xB6,
			0x0E, 0xFB, 0xB9, 0xDF, 0xE1, 0xB1, 0xF6, 0xF6,
			0x40, 0xD2, 0xDE, 0x1E, 0x48, 0xDA, 0xDB, 0x03,
			0x49, 0x7B, 0x7B, 0x20, 0x69, 0x6F, 0x0F, 0x24,
			0xED, 0xED, 0x81, 0xA4, 0xBD, 0x3D, 0x90, 0xB4,
			0xB7, 0x07, 0x92, 0xF6, 0xF6, 0x40, 0xD2, 0xDE,
			0x1E, 0x48, 0xDA, 0xDB, 0x03, 0x49, 0x7B, 0x7B,
			0x20, 0x69, 0x6F, 0x0F, 0x24, 0xED, 0xED, 0x81,
			0xA4, 0xBD, 0x3D, 0x90, 0xB4, 0x27, 0x7F, 0xE0,
			0xDE, 0x0F, 0x44, 0xB5, 0xE9, 0x5A, 0xA4, 0x14,
			0xD5, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
			0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82,
		}
	)
	var expect = `
	%PDF-1.4
	1 0 obj<</Type/Catalog/Pages 2 0 R>>
	endobj
	2 0 obj<</Type/Pages/Count 1/MediaBox[0 0 566 566]/Kids[3 0 R]>>
	endobj
	3 0 obj<</Type/Page/Parent 2 0 R/Contents 4 0 R\
	/Resources<</XObject<</IMG0 5 0 R>>>>>>
	endobj
	4 0 obj <</Filter/FlateDecode/Length 57>>stream
	0A 78 9C 2A E4 52 30 B2 30 D6 33 31 33 31 35 33
	57 30 50 30 40 E6 1A 9A 18 EA 99 1B 1B 19 59 18
	23 33 93 73 B9 F4 3D 7D DD 0D 14 5C F2 B9 02 B9
	00 01 00 00 FF FF A4 FA 0D 1A 0A
	endstream
	5 0 obj<</Type/XObject/Subtype/Image/Width 64/Height 64\
	/ColorSpace/DeviceRGB/BitsPerComponent 8\
	/Filter/FlateDecode/Length 89>>stream
	0A 78 9C EC CE B1 0D 00 30 08 C4 40 F6 5F 9A 0C
	90 DA 05 D2 BD A8 CD ED 4C 7A 6D 7D EB 3C 3F 3F
	3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F
	3F 3F 3F FF 49 7F FD A0 1E 3F 3F 3F 3F 3F 3F 3F
	3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F FF
	BF 17 00 00 FF FF 93 C7 E9 5A 0A
	endstream
	endobj
	xref
	0 6
	0000000000 65535 f
	0000000009 00000 n
	0000000053 00000 n
	0000000125 00000 n
	0000000219 00000 n
	0000000335 00000 n
	trailer
	<</Size 6/Root 1 0 R>>
	startxref
	576
	%%EOF
	`
	// generate image from an array of PNG bytes
	func() {
		var pdf = pdf.NewPDF("20cm x 20cm")
		pdf.SetCompression(true).
			SetUnits("cm").
			DrawImage(x, y, height, pngData)
		pdfFailIfErrors(t, &pdf)
		pdfCompare(t, pdf.Bytes(), expect, pdfStreamsInHex)
	}()
	// the same test, but reading direcly from PNG file
	func() {
		var pdf = pdf.NewPDF("20cm x 20cm")
		pdf.SetCompression(true).
			SetUnits("cm").
			DrawImage(x, y, height, filename)
		pdfFailIfErrors(t, &pdf)
		pdfCompare(t, pdf.Bytes(), expect, pdfStreamsInHex)
	}()
} //                                                                   DrawImage

//end
